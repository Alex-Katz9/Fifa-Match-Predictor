{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "requested-nepal",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import xgboost as xg\n",
    "import pickle\n",
    "win_loss_prediction_model = pickle.load(open('finalized_model_win_loss_prediction.sav', 'rb'))\n",
    "score_diff_prediction_model = pickle.load(open('finalized_model_score_prediction.sav', 'rb'))\n",
    "all_games= pd.read_pickle('model_table4.pkl')\n",
    "\n",
    "st.markdown('# Fifa Match Predictor')\n",
    "st.markdown(\"**XGBoost-generated soccer match results.**\")\n",
    "\n",
    "\n",
    "st.sidebar.markdown('## Starting 11')\n",
    "st.sidebar.markdown('To generate a new team instance, just enter a soccer season in the same format as the example input, then enter starting 11 player lineups for both home and away teams, then click, **Game On!**', unsafe_allow_html=True)\n",
    "\n",
    "st.sidebar.markdown('## Notes')\n",
    "st.sidebar.markdown(\"<ul><li>It is important to note as a user that whichever team is selected as Home will inherantly be slightly more favored to win.</li><li>The fields for the player name should be entered with the first letter of their first name and their last name, or simply their first and last name when necessary.</li></ul>\", unsafe_allow_html=True)\n",
    "st.sidebar.markdown('<img src=\"https://losangeles-mp7static.mlsdigital.net/styles/image_landscape/s3/images/USATSI_13131177.jpg?xjHzWNqdNtczSFx04lIcLKdWqI_IOAB4&itok=AFK5BOsk&c=bf236e045c21367079d12ba5a2e9386c\" width=\"300\"/> ', unsafe_allow_html=True)\n",
    "\n",
    "###### Team Lineups Input ######\n",
    "st.markdown('## Match Simulation')\n",
    "\n",
    "# user input\n",
    "\n",
    "Season = st.text_input(\"Season\", '2019/2020')\n",
    "HomeTeam = st.text_input(\"Home Team\", 'Arsenal')\n",
    "AwayTeam = st.text_input(\"Away Team\", 'Villarreal CF')\n",
    "\n",
    "\n",
    "# match button\n",
    "match_button = st.button('Simulate Match')\n",
    "if match_button:\n",
    "    try:\n",
    "        \n",
    "        home_games = all_games.loc[(all_games['Season'] == Season) & (all_games['HomeTeam'] == HomeTeam)]\n",
    "\n",
    "        home_game = home_games.iloc[0][['Season','offense_mean_H', 'defense_mean_H', 'mentality_mean_H',\n",
    "               'scoring_mean_H', 'agility_fitness_mean_H', 'overall_H']]\n",
    "        home_game\n",
    "        away_games = all_games.loc[(all_games['Season'] == Season) & (all_games['AwayTeam'] == AwayTeam)]\n",
    "        away_game = away_games.iloc[0][['Season', 'offense_mean_A', 'defense_mean_A', 'mentality_mean_A',\n",
    "               'scoring_mean_A', 'agility_fitness_mean_A', 'overall_A']]\n",
    "\n",
    "        df = pd.concat([home_game, away_game], axis=0)\n",
    "        X_all = df[['Season','offense_mean_H', 'defense_mean_H', 'mentality_mean_H',\n",
    "               'scoring_mean_H', 'agility_fitness_mean_H', 'overall_H', 'offense_mean_A', 'defense_mean_A', 'mentality_mean_A',\n",
    "               'scoring_mean_A', 'agility_fitness_mean_A', 'overall_A']].copy()\n",
    "\n",
    "\n",
    "#         from sklearn.preprocessing import scale\n",
    "\n",
    "        cols = [['offense_mean_H', 'defense_mean_H', 'mentality_mean_H',\n",
    "               'scoring_mean_H', 'agility_fitness_mean_H', 'overall_H', 'offense_mean_A', 'defense_mean_A', 'mentality_mean_A',\n",
    "               'scoring_mean_A', 'agility_fitness_mean_A', 'overall_A']]\n",
    "\n",
    "\n",
    "        X_all= pd.DataFrame(data=X_all)\n",
    "        X_all = X_all.T\n",
    "\n",
    "        X_all.drop(['Season'], axis = 1, inplace=True)\n",
    "        X_all\n",
    "        score_diff = score_diff_prediction_model.predict(X_all)\n",
    "        result = ''\n",
    "        if score_diff < -0.5:\n",
    "            result = \"Loss!\"\n",
    "        elif score_diff > 0.5:\n",
    "            result = \"Win!\"\n",
    "        else:\n",
    "            result = \"Tie\"\n",
    "        \n",
    "    \n",
    "\n",
    "    \n",
    "        st.write(result)\n",
    "       \n",
    "        \n",
    "    except Exception as e:\n",
    "        st.exception(\"Exception: %s\\n\"% e)\n",
    "\n",
    "\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
